/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 - 2019
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.apex.bot;

import crypto.MnemonicUtils;
import crypto.CPXKey;
import crypto.CryptoService;
import java.security.interfaces.ECPrivateKey;

import org.bouncycastle.util.encoders.Hex;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

public class TelegramMessageHandler extends ATelegramBot {

    private ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();

    private CryptoService cryptoService = new CryptoService();
    private static final String FAILED = "Input could not be converted. Is it a valid mnemonic?";
    private static final String START =  "Hi there,\n" +
            "\n" +
            "I'm designed to help you recover your private key from the mnemonic phrase generated by the APEX mobile wallet. This will enable you to easily access and transfer funds through any wallet application of your choice.\n" +
            "\n" +
            "\n" +
            "First things first: \n" +
            "\n" +
            "1) NEVER EVER share your private keys with anyone.\n" +
            "\n" +
            "2) When you recover your private key like this, consider both the private key and your mnemonic phrase potentially exposed. This means that you should transfer your funds immediately to another wallet address after receiving your private key, and discard the old address. If you are recovering a private  key from a Ledger mnemonic phrase (due to losing your device or pin), know that you should NOT use your old mnemonic to initialize a new Ledger device but instead start with a fresh initialization.\n" +
            "\n" +
            "3) The creator & host of this bot assumes no responsibility for loss of funds or other damages resulting from the use of this bot.\n" +
            "\n" +
            "4) This bot will not store any information related to you, your identity, your mnemonic phrase or your private key, and it will not transmit such information to any third party. Malicious software such as keyloggers may however do so without your knowledge." +
            "\n" +
            "\n" +
            "Now, to recover your private key simply type in your complete mnemonic phrase, make sure there are no typos, and hit enter.";

    TelegramMessageHandler(String token, String botname){
        super(token, botname);
    }

    @Override
    public void onUpdateReceived(Update update) {
        executor.submit(() -> {
            final long fromChat = update.getMessage().getChatId();
            try {
                if (update.hasMessage()) {
                    SendMessage response = new SendMessage();
                    response.setChatId(fromChat);
                    final String msg = update.getMessage().getText();
                    if (msg.contains("/start")) {
                        response.setText(START);
                        execute(response);
                    } else {
                        try{
                            String privKeyRawString = Hex.toHexString(MnemonicUtils.generateEntropy(msg));
                            ECPrivateKey privKey = cryptoService.getECPrivateKeyFromRawString(privKeyRawString);
                            response.setText("Your NEO public address is:\n" + 
                            CPXKey.getPublicAddressNEO(privKey) + 
                            "\n\nYour WIF private key is:\n" +
                            CPXKey.getPrivKeyWIF(privKey) + 
                            "\n\nYour RAW private key is:\n" + 
                            privKeyRawString + 
                            "\n\nNow please transfer your funds immediately to a new secure address.");
                            execute(response);
                            System.out.println("Mnemonic phrase successfully converted to private key");
                            privkeyRaw = "";
                            privKey = "";
                        } catch (Exception e){
                            response.setText(FAILED);
                            execute(response);
                            System.out.println("Invalid mnemonic phrase submitted");
                        }
                    }
                }
            } catch (Exception e) {}
        });
    }

}
